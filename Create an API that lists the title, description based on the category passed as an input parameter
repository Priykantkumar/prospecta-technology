1).....Create an API that lists the title, description based on the category passed as an input parameter1.

<?xml version="1.0" encoding="utf-8"?>
<findItemsByProductRequest xmlns="http://www.ebay.com/marketplace/search/v1/services">
  <!-- Call-specific Input Fields -->
  <itemFilter> ItemFilter
    <name> TITLE </name>
    <paramName> DESCRIPTION </paramName>
    <paramValue> string </paramValue>
    <value> string </value>
    <!-- ... more value values allowed here ... -->
  </itemFilter>
  <!-- ... more itemFilter nodes allowed here ... -->
  <outputSelector> OutputSelectorType </outputSelector>
  <!-- ... more outputSelector values allowed here ... -->
  <productId type="string"> ProductId (string) </productId>
  <!-- Standard Input Fields -->
  <affiliate> Affiliate
    <customId> string </customId>
    <geoTargeting> boolean </geoTargeting>
    <networkId> string </networkId>
    <trackingId> string </trackingId>
  </affiliate>
  <buyerPostalCode> string </buyerPostalCode>
  <paginationInput> PaginationInput
    <entriesPerPage> int </entriesPerPage>
    <pageNumber> int </pageNumber>
  </paginationInput>
  <sortOrder> SortOrderType </sortOrder>
</findItemsByProductRequest>


2...Create an API that would save a new entry with all the relevant properties which retrieves values from the endpoint GET /entries.Request

HTTP

Copy
GET [Organization URI]/api/data/v9.2/accounts?$select=name
&$filter=primarycontactid/contactid eq a0dbf27c-8efb-e511-80d2-00155db07c77 HTTP/1.1  
Accept: application/json  
OData-MaxVersion: 4.0  
OData-Version: 4.0  
Response

HTTP

Copy
HTTP/1.1 200 OK  
Content-Type: application/json; odata.metadata=minimal  
OData-Version: 4.0  

{  
"@odata.context":"[Organization URI]/api/data/v9.2/$metadata#accounts(name)",
"value":[  
       {  
             "@odata.etag":"W/\"513479\"",
             "name":"Adventure Works (sample)",
             "accountid":"3adbf27c-8efb-e511-80d2-00155db07c77"
       },
       {  
             "@odata.etag":"W/\"514057\"",
             "name":"Blue Yonder Airlines (sample)",
             "accountid":"3edbf27c-8efb-e511-80d2-00155db07c77"
       }
    ]
}
3)... Question: what are the key things you would consider when creating/consuming an API to ensure that it is secure and reliable?Prioritize security. API security shouldn’t be an afterthought or considered “someone else’s problem.
Inventory and manage your APIs.

Use a strong authentication and authorization solution. 
Practice the principle of least privilege
Encrypt traffic using TLS
Remove information that’s not meant to be shared.
Don’t expose more data than necessary.
Validate input.
Use rate limiting
Use a web application firewall.

Theoretical Challenge

Suppose you have a CSV file with the data below.

A1: 5, A2: 7, A3: 9, B1: 3, B2: 8, B3: =4+5, C1: =5+A1, C2: =A2+B2, C3: =C2+B3

This can be represented in an excel sheet below:

write.csv(A1,A2,A3
          file = 'data/A1-A2-A3-C1-C2-C3.csv',
          row.names = FALSE,
          na = '-9999')
Apply formulas to all columns
var i = 1
while (i < 100) {
    columns[i] = "X";
    i++;
}
hange "X" to adjust what happens to each column. For example, to replace all quotation marks in all columns, you could use this formula:

var i = 1
while (i < 100) {
    columns[i] = columns[i].replace(/“/g, ’’);
    i++;
}
What type of errors you would you check for?
It is common for data sets to have missing values, or mistakes. 
The convention for recording missing values often depends on the individual who collected the data and can be recorded as n.a.,
--, or empty cells “ “. R recognises the reserved character string NA as a missing value, but not some of the examples above. 



How might a user break your code?


Let’s say the inflamation scale in the data set we used earlier inflammation-01.csv actually starts at 1 for no inflamation and the zero values (0) 
were a missed observation. Looking at the ?read.csv help page is there an argument we could use to ensure all zeros (0) are read in as NA? Perhaps,
in the car-speeds.csv data contains mistakes and the person measuring the car speeds could not accurately distinguish between “Black or “Blu
Changing code in one place all too often breaks code in a (seemingly) unrelated place. No matter how experienced you might be: you won't be able to predict the possible side effects that code changes can have. That's what gives our jobs that "thrilling touch"... Back your code with automated tests!
